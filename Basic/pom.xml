<!-- project 是所有 pom.xml 的根元素，它声明了一些 POM 相关的命名空间及 xsd 元素。 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- modelVersion 指定了当前 POM 模型的版本，Maven3 只能是 4.0.0。 -->
    <modelVersion>4.0.0</modelVersion>

    <!--
    groupId、artifactId 和 version 这三个元素定义了一个项目基本的坐标。
    在 Maven 中，任何 jar、pom 或者 war 都是以基于这些基本的坐标进行区分的。
    这三项在 pom 文件中是必需的。
    -->
    <!-- groupId 定义了项目属于哪个组织。 -->
    <groupId>liuchenwei</groupId>
    <!-- artifactId 定义了项目在组织中唯一的ID。 -->
    <artifactId>maven-demo-basic</artifactId>
    <!-- version 定义了项目当前的版本，SNAPSHOT 意为快照，说明该项目尚在开发汇中，是不稳定版本。 -->
    <version>0.0.1-SNAPSHOT</version>
    <name>Basic</name>
    <!--
    packaging 定义了项目的打包方式，通常与所生成构件的扩展名对应。
    默认值是 jar，也可以是 war 或者 pom 等方式。
    -->
	<!-- 聚合项目的 packaging 必须是 pom 方式，否则无法构建 -->
    <packaging>pom</packaging>
	<!--
	modules 元素是实现聚合的最核心配置，可以通过在一个打包方式为 pom 的 Maven 
	项目中声明任意数量的 module 元素来实现模块的聚合。
	这里每个 module 的值都是一个当前 POM 的相对目录，而这些 module 自身离开 maven-demo-basic 也能独立构建。
	-->
    <modules>
        <module>basic_jdbc</module>
        <module>basic_util</module>
    </modules>
    <!-- dependencies 元素下可以包含多个 dependency 元素以声明项目的依赖。 -->
    <dependencies>
        <!-- 每一个依赖都需要用坐标唯一标识 -->
        <dependency>
            <!-- JUnit 是事实上的单元测试标准，要使用它需要添加依赖。 -->
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <!-- scope 为依赖范围，默认是 compile，表示该依赖对主代码和测试代码都有效。 -->
            <scope>test</scope>
        </dependency>
    </dependencies>
	<!-- build 元素下的 plugins 子元素可以声明用到的插件 -->
    <build>
        <plugins>
            <!-- 
			配置 compiler 插件使其支持 Java5，Maven 默认只支持 Java1.3。
			这是一个全局配置，所有基于此 POM 文件的任务，都会使用这些配置。
			也就是说，不论是 maven-compiler-plugin:compile 还是 maven-compiler-plugin:testCompile 任务都会基于 JDK1.7 进行编译。
			-->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
			<!-- maven-source-plugin 插件能够将项目的主代码打包成 jar 文件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.4</version>
				<!-- executions 表示插件执行配置，它的每个 execution 子元素都可以用来配置执行一个任务 -->
                <executions>
                    <execution>
						<!-- 将其绑定到 default 生命周期的 package 阶段上。 -->
                        <phase>package</phase>
						<!-- 会创建一个以 -sources.jar 结尾的源码包。 -->
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <!--
    生成站点信息（site），不需要任何配置就能让 Maven 生成项目信息，其内置插件会基于 POM 配置生成下列项目信息报告：
    -->
    <url>https://github.com/liuchenwei2000/Maven-demo</url>
    <description>Maven demo</description>
    <!-- 项目团队成员信息 -->
    <developers>
        <developer>
            <id>A00001</id>
            <name>liuchenwei</name>
            <email>liuchenwei2000@163.com</email>
        </developer>
        <developer>
            <id>A00002</id>
            <name>zyy</name>
            <email>zyy@163.com</email>
        </developer>
    </developers>
    <!-- 项目的源码仓库信息 -->
    <scm>
        <connection>scm:git:https://github.com/liuchenwei2000/Maven-demo/tree/master/Basic</connection>
        <developerConnection>scm:git:https://github.com/liuchenwei2000/Maven-demo/tree/master/Basic</developerConnection>
        <url>https://github.com/liuchenwei2000/Maven-demo/tree/master/Basic</url>
    </scm>
    <!-- 项目的问题追踪系统信息 -->
    <issueManagement>
        <system>JIRA</system>
        <url>https://www.atlassian.com/software/jira</url>
    </issueManagement>
    <!-- 项目持续集成服务器信息 -->
    <ciManagement>
        <system>Jenkins</system>
        <url>http://jenkins-ci.org</url>
    </ciManagement>
    <!-- 项目许可证信息 -->
    <licenses>
        <license>
            <name>APACHE LICENSE 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>

    <!--
    除了默认的项目信息报告，Maven 社区还提供了大量报告插件，只要稍加配置，用户就能让 Maven 自动生成各种内容丰富的报告。
    -->
    <reporting>
        <plugins>
            <!--
            maven-javadoc-plugin 插件使用JDK的 javadoc 工具，基于项目的源代码生成 JavaDoc 文档。
            该插件无需额外的配置，能在聚合项目的站点中得到包含所有模块的 Javadoc。
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.3</version>
            </plugin>
            <!--
            CheckStyle 是一个用来帮助开发人员遵循编码规范的工具，能根据一套规则自动检查 Java 代码，使得团队能够方便地定义自己的编码规范。
            要让 Maven 在站点中生成 CheckStyle 报告，只需要配置 maven-checkstyle-plugin 插件即可。
            默认情况下，maven-checkstyle-plugin 会使用 Sun 定义的编码规范，也可以选择其他预置的规则，或自定义规则。
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>2.17</version>
                <!--
                配置自定义的编码规范
                <configuration>
                    <configLocation>config/my-checkstyle.xml</configLocation>
                </configuration>
                -->
            </plugin>
            <!--
            要让 Maven 在站点中生成代码检查报告，只需要配置 findbugs-maven-plugin 插件。
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
            <!-- 要让 Maven 在站点中包含 Cobertura 测试覆盖率报告，只需要配置 cobertura-maven-plugin 插件。 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
            </plugin>
        </plugins>
    </reporting>

</project>